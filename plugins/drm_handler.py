import os
import re
import math
import requests
import time

from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from pyromod.exceptions import ListenerTimeout

STOP_DOWNLOADS = set()

async def process_drm(bot: Client, m, user_id: int):
    chat_id = m.chat.id

    await m.reply_text("üìÑ ‡§ï‡•É‡§™‡§Ø‡§æ .txt ‡§´‡§º‡§æ‡§á‡§≤ ‡§≠‡•á‡§ú‡•á‡§Ç (‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™: Title:URL per line)")
    try:
        file_msg = await bot.listen(chat_id, filters=filters.document, timeout=120)
        if not file_msg.document.file_name.endswith(".txt"):
            await m.reply("‚ùå ‡§ï‡•á‡§µ‡§≤ .txt ‡§´‡§º‡§æ‡§á‡§≤ ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§π‡•à")
            return
    except ListenerTimeout:
        await m.reply("‚è∞ ‡§∏‡§Æ‡§Ø ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ó‡§Ø‡§æ, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç")
        return

    file_path = await bot.download_media(file_msg)
    with open(file_path, "r", encoding="utf-8") as f:
        lines = [line.strip() for line in f if ':' in line]
        links = [(line.split(":", 1)[0].strip(), line.split(":", 1)[1].strip()) for line in lines]

    if not links:
        await m.reply("‚ùå ‡§ï‡•ã‡§à ‡§µ‡•à‡§ß ‡§≤‡§ø‡§Ç‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ")
        return

    total = len(links)
    pdf_count = sum(1 for _, url in links if url.lower().endswith(".pdf"))
    video_count = total - pdf_count
    await m.reply(f"üî¢ ‡§ï‡•Å‡§≤ ‡§≤‡§ø‡§Ç‡§ï: {total}\nüéûÔ∏è ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã: {video_count}\nüìö PDF: {pdf_count}")

    # Index input
    await m.reply("üî¢ ‡§ï‡§ø‡§∏ Index ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡§æ ‡§π‡•à? (‡§â‡§¶‡§æ‡§π‡§∞‡§£: 1)")
    idx_msg = await bot.listen(chat_id, filters.user(user_id), timeout=60)
    try:
        start_index = int(idx_msg.text.strip()) - 1
    except:
        await m.reply("‚ùå ‡§ó‡§≤‡§§ Index")
        return

    # Quality
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("360p", callback_data="q360")],
        [InlineKeyboardButton("480p", callback_data="q480")],
        [InlineKeyboardButton("720p", callback_data="q720")],
        [InlineKeyboardButton("1080p", callback_data="q1080")]
    ])
    msg = await m.reply("üéöÔ∏è ‡§è‡§ï ‡§ï‡•ç‡§µ‡§æ‡§≤‡§ø‡§ü‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç:", reply_markup=keyboard)
    cb = await bot.listen(chat_id, filters.user(user_id) & filters.regex("^q"))
    await cb.answer()
    quality = cb.data.replace("q", "")

    # Batch name
    await m.reply("üóÇÔ∏è Batch Name ‡§°‡§æ‡§≤‡•á‡§Ç (‡§Ø‡§æ 'C' ‡§≠‡•á‡§ú‡•á‡§Ç ‡§´‡§º‡§æ‡§á‡§≤ ‡§®‡§æ‡§Æ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è)")
    batch_msg = await bot.listen(chat_id, filters.user(user_id), timeout=60)
    batch_name = batch_msg.text.strip()
    if batch_name.lower() == 'c':
        batch_name = os.path.splitext(os.path.basename(file_msg.document.file_name))[0]

    # Extracted by
    await m.reply("‚úçÔ∏è Extracted by ‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§Ø‡§æ ‡§≤‡§ø‡§ñ‡§®‡§æ ‡§π‡•à? (‡§õ‡•ã‡§°‡§º‡§®‡•á ‡§™‡§∞ 'Jaat')")
    ext_msg = await bot.listen(chat_id, filters.user(user_id), timeout=60)
    extracted_by = ext_msg.text.strip() or "Jaat"

    # Download loop
    start_time = time.time()
    for idx, (title, url) in enumerate(links[start_index:], start=start_index + 1):
        if user_id in STOP_DOWNLOADS:
            break

        topic = title.strip()[:30]
        caption = f"üî¢ Index: {idx}\nüéØ Topic: {topic}\nüóÇÔ∏è Batch: {batch_name}\n‚úçÔ∏è Extracted by: {extracted_by}"

        file_name = f"{idx}_{re.sub(r'[^0-9a-zA-Z]+', '_', topic)}"
        if url.lower().endswith(".pdf"):
            res = requests.get(url)
            pdf_file = file_name + ".pdf"
            with open(pdf_file, "wb") as f:
                f.write(res.content)
            await bot.send_document(chat_id, pdf_file, caption=caption)
            os.remove(pdf_file)
        else:
            drm_url = f"https://dragoapi.vercel.app/video/{url}"
            r = requests.get(drm_url, stream=True, headers={"User-Agent": "Mozilla/5.0"})
            video_path = file_name + ".mp4"
            with open(video_path, "wb") as f:
                for chunk in r.iter_content(chunk_size=1024 * 1024):
                    if chunk:
                        f.write(chunk)
            size = os.path.getsize(video_path)
            if size > 1.5 * 1024**3:
                await bot.send_message(chat_id, "‚ö†Ô∏è ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§¨‡§°‡§º‡§æ ‡§π‡•à, ‡§∏‡•ç‡§™‡•ç‡§≤‡§ø‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ")
                with open(video_path, 'rb') as f:
                    part = 1
                    while chunk := f.read(int(1.5 * 1024**3)):
                        part_file = f"{file_name}_part{part}.mp4"
                        with open(part_file, "wb") as pf:
                            pf.write(chunk)
                        await bot.send_video(chat_id, part_file, caption=f"{caption}\nüì¶ Part {part}")
                        os.remove(part_file)
                        part += 1
                os.remove(video_path)
            else:
                await bot.send_video(chat_id, video_path, caption=caption)
                os.remove(video_path)

    elapsed = int(time.time() - start_time)
    await bot.send_message(chat_id, f"‚úÖ Done!‚è±Ô∏è Total Time: {elapsed // 60}m {elapsed % 60}s")
    if user_id in STOP_DOWNLOADS:
        STOP_DOWNLOADS.remove(user_id)
